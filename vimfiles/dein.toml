# dein本体。基本は repo に github のリポジトリを設定するだけでよい
[[plugins]]
repo = 'Shougo/dein.vim'

# Vim非同期処理
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# NERDTreeの設定
[[plugins]]
repo = 'scrooloose/nerdtree'
# 設定
hook_add = '''
   " 隠しファイルをデフォルトで表示させる$
   let NERDTreeShowHidden = 1
'''

# 補完強化
[[plugins]]
repo = 'Shougo/neocomplete'
# 設定
hook_add = '''
   "Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
   " Disable AutoComplPop.
   let g:acp_enableAtStartup = 0
   " Use neocomplete.
   let g:neocomplete#enable_at_startup = 1
   " Use smartcase.
   let g:neocomplete#enable_smart_case = 1
   " Set minimum syntax keyword length.
   let g:neocomplete#sources#syntax#min_keyword_length = 3
   let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
   
   " Define dictionary.
   let g:neocomplete#sources#dictionary#dictionaries = {
       \ 'default' : '',
       \ 'vimshell' : $HOME.'/.vimshell_hist',
       \ 'scheme' : $HOME.'/.gosh_completions'
           \ }
   
   " Define keyword.
   if !exists('g:neocomplete#keyword_patterns')
       let g:neocomplete#keyword_patterns = {}
   endif
   let g:neocomplete#keyword_patterns['default'] = '\h\w*'
   
   " Plugin key-mappings.
   inoremap <expr><C-g>     neocomplete#undo_completion()
   inoremap <expr><C-l>     neocomplete#complete_common_string()
   
   " Recommended key-mappings.
   " <CR>: close popup and save indent.
   inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
   function! s:my_cr_function()
     return neocomplete#close_popup() . "\<CR>"
     " For no inserting <CR> key.
     "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
   endfunction
   " <TAB>: completion.
   inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
   " <C-h>, <BS>: close popup and delete backword char.
   inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
   inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
   inoremap <expr><C-y>  neocomplete#close_popup()
   inoremap <expr><C-e>  neocomplete#cancel_popup()
   " Close popup by <Space>.
   "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"
   
   " For cursor moving in insert mode(Not recommended)
   "inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
   "inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
   "inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
   "inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
   " Or set this.
   "let g:neocomplete#enable_cursor_hold_i = 1
   " Or set this.
   "let g:neocomplete#enable_insert_char_pre = 1
   
   " AutoComplPop like behavior.
   "let g:neocomplete#enable_auto_select = 1
   
   " Shell like behavior(not recommended).
   "set completeopt+=longest
   "let g:neocomplete#enable_auto_select = 1
   "let g:neocomplete#disable_auto_complete = 1
   "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
   
   " Enable omni completion.
   autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
   autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
   autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
   autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
   autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
   
   " Enable heavy omni completion.
   if !exists('g:neocomplete#sources#omni#input_patterns')
     let g:neocomplete#sources#omni#input_patterns = {}
   endif
   "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
   "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
   "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
   
   " For perlomni.vim setting.
   " https://github.com/c9s/perlomni.vim
   let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
   
'''

# 英単語補完 
[[plugins]]
repo = 'ujihisa/neco-look'

# 色設定
[[plugins]]
repo = 'w0ng/vim-hybrid'

# 空白文字 可視
[[plugins]]
repo = 'Yggdroot/indentLine'
# 設定
hook_add = '''
   " indentLineの設定
   set list listchars=tab:\¦\
'''

# コメント 設定
[[plugins]]
repo = 'scrooloose/nerdcommenter'
# 設定
hook_add = '''

  let g:NERDCreateDefaultMappings = 0
  let g:NERDSpaceDelims = 1
  
  "キーマッピングは別の場所に記載

'''

## シンタックスチェック
# [[plugins]]
# repo = 'scrooloose/syntastic'
## 設定
#hook_add = '''
#    set statusline+=%#warningmsg#
#    set statusline+=%{SyntasticStatuslineFlag()}
#    set statusline+=%*
#
#    let g:syntastic_always_populate_loc_list = 1
#    let g:syntastic_auto_loc_list = 1
#    let g:syntastic_check_on_open = 1
#    let g:syntastic_check_on_wq = 0
#    let g:syntastic_html_tidy_exec = 'tidy5'
#'''


# シンタックスチェック
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'filename', 'modified' ],
    \             [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ],
    \ },
    \ }
'''
# シンタックスチェック
[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }
'''
# シンタックスチェック
[[plugins]]
repo = 'w0rp/ale'
# 設定
hook_add = '''
    let b:ale_linters = {
    \   'javascript': ['eslint', 'eslint-plugin-vue'],
    \   'python': ['pyflakes', 'pep8'],
    \   'php': ['php'],
    \   'ruby': ['rubocop'],
    \   'tex': ['textlint'],
    \   'markdown': ['textlint'],
    \   'css': ['stylelint'],
    \}
let g:ale_sign_column_always = 1
let g:ale_lint_on_enter = 0 
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_open_list = 1
let g:ale_keep_list_window_open = 0
let g:ale_sign_error = 'E'
let g:ale_sign_warning = 'W'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %code: %%s [%severity%]'
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''
